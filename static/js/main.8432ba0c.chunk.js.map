{"version":3,"sources":["components/card.js","components/ListItem.js","components/List.js","components/TodoForm.js","components/Item.js","Todo.js","reportWebVitals.js","index.js"],"names":["Card","props","className","children","DoneImg","done","width","alt","src","ListItem","item","text","onClick","onDone","onItemDeleted","id","List","items","map","Math","random","TodoForm","useState","setText","onChange","event","Txt","target","value","type","preventDefault","onAddItem","Item","this","lastId","SAVED_ITEMS","Todo","setItems","useEffect","savedItems","JSON","parse","localStorage","getItem","setItem","stringify","it","updatedItems","filterItems","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAWeA,MARf,SAAcC,GAEV,OAAO,qBAAKC,UAAWD,EAAMC,UAAN,UAAmBD,EAAMC,UAAzB,SAA0C,OAA1D,SACFD,EAAME,YCAf,SAASC,EAAQH,GACb,OAAIA,EAAMI,KACE,qBAAKC,MAAM,OAAOC,IAAI,OAAOC,IAAI,oBAEjC,qBAAKF,MAAM,OAAOC,IAAI,OAAOC,IAAI,qBAqBlCC,MAjBf,SAAkBR,GAEd,OAAQ,6BACA,eAAC,EAAD,CAAMC,UAAWD,EAAMS,KAAKL,KAAO,sBAAwB,OAA3D,UACKJ,EAAMS,KAAKC,KAGZ,gCACI,wBAAQC,QAAS,WAAQX,EAAMY,OAAOZ,EAAMS,OAA5C,SAAqD,cAACN,EAAD,CAASC,KAAMJ,EAAMS,KAAKL,SAE/E,wBAAQO,QAAS,WAAQX,EAAMa,cAAcb,EAAMS,OAAnD,SAA4D,qBAAKJ,MAAM,OAAOC,IAAI,SAASC,IAAI,+BAR9FP,EAAMS,KAAKK,KCJjBC,MARf,SAAcf,GAEV,OAAQ,6BACHA,EAAMgB,MAAMC,KAAI,SAACR,GAAD,OAAU,cAAC,EAAD,CAA6CA,KAAMA,EAAMG,OAAQZ,EAAMY,OAAQC,cAAeb,EAAMa,eAArFJ,EAAKK,GAAmB,IAAdI,KAAKC,gBC6BlDC,MAjCf,SAAkBpB,GAEd,MAAuBqB,mBAAS,IAAhC,mBAAOX,EAAP,KAAaY,EAAb,KAqBD,OAAO,iCACL,uBAAOC,SAlBR,SAAsBC,GAClB,IAAIC,EAAKD,EAAME,OAAOC,MACtBL,EAAQG,IAgBoBG,KAAK,OAAOD,MAAOjB,IAClD,wBAAQI,GAAG,SAASH,QAZrB,SAAiBa,GACbA,EAAMK,iBACHnB,IACJV,EAAM8B,UAAUpB,GACfY,EAAQ,MAQX,qB,OCxBCS,EAEF,WAAYrB,GAAO,oBAEfsB,KAAKlB,GAAKiB,EAAKE,SACfD,KAAKtB,KAAOA,EACZsB,KAAK5B,MAAO,GANd2B,EACKE,OAAQ,EAWJF,QCVTG,EAAc,aAwDLC,MArDf,WACI,MAA0Bd,mBAAS,IAAnC,mBAAOL,EAAP,KAAcoB,EAAd,KAsCA,OAhCAC,qBAAU,WACN,IAAIC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQR,IAC9CI,GACCF,EAASE,KAEf,IAEFD,qBAAU,WACNI,aAAaE,QAAQT,EAAYK,KAAKK,UAAU5B,MACnD,CAACA,IAuBM,sBAAKf,UAAU,YAAf,UACJ,sCACA,cAAC,EAAD,CAAU6B,UAvBd,SAAmBrB,GACf,IAAIoC,EAAK,IAAId,EAAKtB,GAClB2B,EAAS,GAAD,mBAAKpB,GAAL,CAAY6B,QAwBpB,cAAC,EAAD,CAAMjC,OAfX,SAAgBH,GACZ,IAAIqC,EAAe9B,EAAMC,KAAI,SAAC4B,GAI7B,OAHGA,EAAG/B,KAAOL,EAAKK,KACd+B,EAAGzC,MAAQyC,EAAGzC,MAEXyC,KAERT,EAASU,IAQcjC,cApB3B,SAAuBJ,GACnB,IAAIsC,EAAc/B,EAAMgC,QAAO,SAACH,GAAD,OAAOA,EAAG/B,KAAOL,EAAKK,MACrDsB,EAASW,IAkB4C/B,MAAOA,QCzCpDiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8432ba0c.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n\r\nfunction Card(props) {\r\n\r\n    return(<div className={props.className?`${props.className} card`:\"card\"}>\r\n        {props.children}\r\n    </div>\r\n    )    \r\n}\r\n\r\nexport default Card","import React from \"react\"\r\nimport Card from \"./card\"\r\n\r\n\r\n\r\n\r\nfunction DoneImg(props) {\r\n    if (props.done) {\r\n        return (<img width=\"20px\" alt=\"done\" src=\"./assets/on.png\"></img>)\r\n    } else {\r\n        return (<img width=\"20px\" alt=\"done\" src=\"./assets/off.png\"></img>)\r\n    }\r\n}\r\n\r\nfunction ListItem(props) { //props serve para sinalizar um propriedade do meu componente\r\n\r\n    return (<li key={props.item.id}>\r\n            <Card className={props.item.done ? \"done item card_okay\" : \"item\"} >\r\n                {props.item.text}\r\n                {/* props.onDone está declarando um novo atributo, recebendo do TODO uma função e enviando daqui o parâmetro item do map */}\r\n\r\n                <div>\r\n                    <button onClick={() => { props.onDone(props.item) }}><DoneImg done={props.item.done}></DoneImg></button>\r\n\r\n                    <button onClick={() => { props.onItemDeleted(props.item) }}><img width=\"20px\" alt=\"delete\" src=\"./assets/lixo.png\"></img></button>\r\n                </div>\r\n            </Card>\r\n        </li>)\r\n}\r\n\r\n\r\nexport default ListItem","import React from \"react\"\r\nimport ListItem from \"./ListItem\"\r\n\r\n\r\nfunction List(props) { //props serve para sinalizar um propriedade do meu componente\r\n\r\n    return (<ul>\r\n        {props.items.map((item) => <ListItem key={item.id + Math.random()*1000} item={item} onDone={props.onDone} onItemDeleted={props.onItemDeleted}></ListItem>)}\r\n    </ul>)\r\n}\r\n\r\n\r\nexport default List","import React,{useState} from \"react\"\r\n\r\n\r\nfunction TodoForm(props) {\r\n    \r\n    const [text, setText]= useState(\"\")\r\n    \r\n\r\n    \r\n    function handleChange(event){\r\n        let Txt= event.target.value\r\n        setText(Txt) //modificando o text para o valor do input\r\n        \r\n    }\r\n\r\n\r\n    function addItem(event){\r\n        event.preventDefault()\r\n        if(text){\r\n       props.onAddItem(text) //pegando a função do pai TODO\r\n        setText(\"\")\r\n        }\r\n    }\r\n\r\n  \r\n   \r\n   return(<form>\r\n     <input onChange={handleChange} type=\"text\" value={text}></input>\r\n     <button id=\"add_bt\" onClick={addItem}>Add</button>\r\n   </form>)\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default TodoForm","\r\n\r\n/*===================== CRIANDO OBJETO MODELO ==================== */\r\n\r\nclass Item{\r\n    static lastId =0 // Criando variável de classe\r\n    constructor(text) {\r\n       \r\n        this.id = Item.lastId++\r\n        this.text = text\r\n        this.done = false\r\n    }//Será chamado sempre que um novo item for criado\r\n\r\n\r\n}\r\n\r\nexport default Item","import React, { useEffect, useState } from 'react'\r\nimport \"./Todo.css\"\r\nimport List from \"./components/List\"\r\nimport TodoForm from \"./components/TodoForm\"\r\nimport Item from \"./components/Item\"\r\n\r\nconst SAVED_ITEMS = \"savedItems\"\r\n\r\n\r\nfunction Todo() {\r\n    const [items, setItems] = useState([]) //Estado inicial como array vazia\r\n    \r\n   \r\n   \r\n  \r\n\r\n    useEffect(()=>{\r\n        let savedItems = JSON.parse(localStorage.getItem(SAVED_ITEMS)) //Usando local storage para salvar os dados \r\n        if(savedItems){\r\n            setItems(savedItems) \r\n        }   \r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        localStorage.setItem(SAVED_ITEMS,JSON.stringify(items))\r\n   },[items])\r\n\r\n    function onAddItem(item) { //recebendo text do TodoForm\r\n        let it = new Item(item)\r\n        setItems([...items, it])\r\n    }\r\n\r\n\r\n   function OnItemDeleted(item){\r\n       let filterItems = items.filter((it)=> it.id !== item.id ) // recebendo todos os itens que forem diferentes do passado\r\n       setItems(filterItems)\r\n   }\r\n\r\n   function onDone(item) {\r\n       let updatedItems = items.map((it)=>{\r\n        if(it.id === item.id){\r\n            it.done = !it.done\r\n        }\r\n        return it\r\n       })\r\n       setItems(updatedItems)\r\n   }\r\n\r\n    return (<div className=\"container\">\r\n        <h1>Todo</h1>\r\n        <TodoForm onAddItem={onAddItem}></TodoForm> \r\n        {/* Chamando o Form com atributo passando função */}\r\n\r\n        <List onDone={onDone} onItemDeleted={OnItemDeleted} items={items}></List> \r\n        {/* Recebendo uma array de objetos*/}\r\n    </div>)\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Todo","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './Todo';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Todo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}